echo               both

include            in.vars
dimension          ${ndim}
units              si
atom_modify        map array sort 0 0
atom_style         hybrid meso/trans bond
comm_modify        vel yes
log                ${dname}/lammps.log

read_data          data.polymer
variable        Natoms equal count(all)
if ${ndim}==2 then "variable domain_volume equal ${Lx}*${Ly}" else "variable domain_volume equal ${Lx}*${Ly}*${Lz}"

variable       sph_mass             equal ${sph_rho}*${domain_volume}/${Natoms}
variable       k                    equal ${dx_flesh}/${dx}
variable       mass_sw_surface_head equal ((${k}<0.6)*${k}^3+(${k}>=0.6)*${k}^(1/2))*${sph_mass}
variable       k                    delete
variable       sph_rho0_flesh       equal ${sph_rho0}
variable       sph_c_flesh          equal ${sph_c}*sqrt(${sph_rho0}/${sph_rho0_flesh})
variable       pb_flesh equal ${sph_c_flesh}^2*${sph_rho0_flesh}

include        in.swimmer

mass           ${atom_type_solvent} ${sph_mass}
mass           ${atom_type_sw_rest} ${sph_mass}
mass           ${atom_type_sw_surface_head} ${mass_sw_surface_head}

# do full time integration
fix                integrate_fix_full all  meso/trans

neighbor           0 bin
neigh_modify       delay 0 every 1

compute            rho_peratom all meso_rho/atom
compute            vt_peratom  all meso_vt/atom
variable           vtx         atom c_vt_peratom[1]
variable           vty         atom c_vt_peratom[2]
variable           vtz         atom c_vt_peratom[3]
include            in.dump

thermo             ${saver_freq}

##################### relaxation: stage 1, heat up the liquid with Langevin thermostat 
variable           sph_eta equal ${sph_eta_relaxation}
include            settimestep.lmp
include            in.pairs
timestep           ${dt}
group              solvent      type ${atom_type_solvent}
variable           kb           equal 1.3806488e-23
variable           Temp         equal 1e-5/${kb}
fix                fix_langevin solvent langevin ${Temp} 0 1e-2 699483
write_data         ${dname}/swimmer.dat

# Zero out the z-dimension velocity and force on each atom
if "${ndim}==2"    then "fix                e2d  all enforce2d"
run                ${nrelaxation1}

##################### relaxation: stage 2, cancel liner and angular momentum, "unfix" Langevin
unfix              fix_langevin
variable           kb           delete
variable           Temp         delete
velocity           all zero linear
velocity           all zero angular
run                ${nrelaxation2}
velocity           all zero linear
velocity           all zero angular

##################### production run
variable           sph_eta equal ${sph_eta_real}
include            settimestep.lmp
include            in.pairs
timestep           ${dt}

group              sw_rest           type ${atom_type_sw_rest}
group              sw_surface_head   type ${atom_type_sw_surface_head}
group              gswimmer          union sw_rest sw_surface_head

variable           physical_time equal ${dt}*(step-${nrelaxation1}-${nrelaxation2})
compute            rho_max sw_surface_head reduce max c_rho_peratom
compute            rho_min sw_surface_head reduce min c_rho_peratom

compute            bl all bond/local/extended power
compute            power all reduce sum c_bl

fix                fprint_mom all print ${print_freq} "${physical_time} $(c_rho_min) $(c_rho_max) $(c_power)" &
                   screen no file ${dname}/pmoments.dat

# xcm: 2-4
# vcm: 5-7
# fcm: 8-10
# omega: 11-13
# torque:14-16
fix                fprint_sw all print ${print_freq} "${physical_time} &
$(xcm(gswimmer,x)) $(xcm(gswimmer,y)) $(xcm(gswimmer,z)) &
$(vcm(gswimmer,x)) $(vcm(gswimmer,y)) $(vcm(gswimmer,z)) &
$(fcm(gswimmer,x)) $(fcm(gswimmer,y)) $(fcm(gswimmer,z)) &
$(omega(gswimmer,x)) $(omega(gswimmer,y)) $(omega(gswimmer,z)) &
$(torque(gswimmer,x)) $(torque(gswimmer,y)) $(torque(gswimmer,z))" &
                   screen no file ${dname}/pswimmer.dat

run                ${nstep}
